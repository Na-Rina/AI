# rules_paths: 주어진 경로에서 사용가능한 모든 규칙 생성
def get_loaded_rules(rules_paths):
    """Yields all available rules.

    :type rules_paths: [Path]
    :rtype: Iterable[Rule]
    """
    for path in rules_paths:
        if path.name != '__init__.py':
        # Rule.from_path(path): 주어진 경로에서 규칙 생성
            rule = Rule.from_path(path)
            if rule and rule.is_enabled:
                yield rule
# 규칙을 찾는 모든 경로 생성                
def get_rules_import_paths():
    """Yields all rules import paths.

    :rtype: Iterable[Path]
    """
    yield Path(__file__).parent.joinpath('rules')  # 기본 규칙 경로
    yield settings.user_dir.joinpath('rules')  # 사용자 정의 규칙 경로
    # 타사 패키지의 규칙 경로
    for path in sys.path:
        for contrib_module in Path(path).glob('thefuck_contrib_*'):
            contrib_rules = contrib_module.joinpath('rules')
            if contrib_rules.is_dir():
                yield contrib_rules
# 활성화된 모든 규칙 반환
def get_rules():
    """Returns all enabled rules.

    :rtype: [Rule]
    """
    # get_rules_import_paths(): 규칙을 가져올 수 있는 경로 확인
    paths = [rule_path for path in get_rules_import_paths()
             for rule_path in sorted(path.glob('*.py'))]
    return sorted(get_loaded_rules(paths), key=lambda rule: rule.priority)
# 중복되지 않는 정렬된 명령을 생성
# corrected_commands: 수정된 명령 목록을 나타냄
# 첫 번째 명령 생성, 중복 피하면서 나머지 명령을 정렬하여 생성
def organize_commands(corrected_commands):
    """Yields sorted commands without duplicates.

    :type corrected_commands: Iterable[thefuck.types.CorrectedCommand]
    :rtype: Iterable[thefuck.types.CorrectedCommand]
    """
    try:
        first_command = next(corrected_commands)
        yield first_command
    except StopIteration:
        return

    without_duplicates = {
        command for command in sorted(
            corrected_commands, key=lambda command: command.priority)
        if command != first_command}

    sorted_commands = sorted(
        without_duplicates,
        key=lambda corrected_command: corrected_command.priority)
		# logs.debug(): 디버그 로그 생성, 수정된 명령 확인
    logs.debug(u'Corrected commands: {}'.format(
        ', '.join(u'{}'.format(cmd) for cmd in [first_command] + sorted_commands)))

    for command in sorted_commands:
        yield command

def get_corrected_commands(command):
    """Returns generator with sorted and unique corrected commands.

    :type command: thefuck.types.Command
    :rtype: Iterable[thefuck.types.CorrectedCommand]
    """
    # get_rules(): 활성화된 모든 규칙을 가져옴
# 각 규칙에 대해 주어진 명령이 일치하는지 확인, 해당하는 수정된 명령을 생성
# organize_commands(correted_commands): 중복되지 않는 정렬된 수정 명령을 반환
    
    corrected_commands = (
        corrected for rule in get_rules()
        if rule.is_match(command)
        for corrected in rule.get_corrected_commands(command))
    return organize_commands(corrected_commands)
